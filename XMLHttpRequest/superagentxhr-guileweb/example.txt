(let ((file-path (public-file-path path)))
(if (file-exists? file-path)
(let* ((mime-type (mime-type-ref file-path))
(mime-type-symbol (mime-type-symbol mime-type)))
(if (text-mime-type? mime-type)
(values
`((content-type . (,mime-type-symbol)))
(lambda (out-port)
(call-with-input-file file-path
(lambda (in-port)
(display (read-delimited "" in-port)
out-port)))))
(values
`((content-type . (,mime-type-symbol)))
(call-with-input-file file-path
(lambda (in-port)
(get-bytevector-all in-port))))))
(not-found request)))




(define-module (glider mime-types)
  :export (mime-type-ref text-mime-type? mime-type-symbol))

(define *mime-types* (make-hash-table 31))
(hash-set! *mime-types* "css" '("text" . "css"))
(hash-set! *mime-types* "txt" '("text" . "plain"))
(hash-set! *mime-types* "png" '("image" . "png"))
(hash-set! *mime-types* "jpg" '("image" . "jpeg"))
(hash-set! *mime-types* "jpeg" '("image" . "jpeg"))
(hash-set! *mime-types* "gif" '("image" . "gif"))

(define (mime-type-ref file-name)
  (let* ((dot-position (string-rindex file-name #\.))
         (extension (and dot-position
                         (string-copy file-name (+ dot-position 1))))
         (mime-type (and dot-position
                         (hash-ref *mime-types* extension))))
    (if mime-type mime-type '("application" . "octet-stream"))))

(define (mime-type-symbol mime-type)
  (string->symbol (string-append (car mime-type) "/" (cdr mime-type))))

(define (text-mime-type? mime-type)
  (if (equal? (car mime-type) "text") #t #f))



(define (debug-page request body)
  (respond
   `((h1 "hello world!")
     (table
      (tr (th "header") (th "value"))
      ,@(map (lambda (pair)
               `(tr (td (tt ,(with-output-to-string
                               (lambda () (display (car pair))))))
                    (td (tt ,(with-output-to-string
                               (lambda ()
                                 (write (cdr pair))))))))
             (request-headers request))))))


             <request> method: POST uri: #<<uri> scheme: #f userinfo: #f host: #f port:
              #f path: "/ajax" query: #f fragment: #f> version: (1 . 1) headers: ((host "localhost" . 8080) 
              (connection keep-alive) (content-length . 11) (user-agent . "Mozilla/5.0 (X11; Linux x86_64)
               AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.125 Safari/537.36")
                (dnt . "1") (content-type application/html) (accept (*/*)) (origin . "http://localhost:8080") 
                (sec-fetch-site . "same-origin") (sec-fetch-mode . "cors") (sec-fetch-dest . "empty")
                 (referer . #<<uri> scheme: http userinfo: #f host: "localhost" port: 8080 path: "/two" query: #f fragment: #f>) 
                 (accept-encoding (1000 . "gzip") (1000 . "deflate") (1000 . "br")) (accept-language (1000 . "en-US") (900 . "en"))) 
                 meta: () port: #<input-output: socket 17>>
