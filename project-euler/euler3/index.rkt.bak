#lang sicp
(define (isPrime? x)
  (cond [(<= x 3) (> x 1)]
        [(or (zero? (modulo x 2))(zero? (modulo x 3))) false]
        [ else (let loop ([i 5])
                   (if (<= (* i i) x)
                     (if (or (zero?(modulo x i)) (zero?(modulo x (+ i 2)))) nil  (loop (+ i 6)))  
                     true
                   )
               )] 
  )
)

  
(isPrime? 6)
;;function is_prime(n)
;;    if n ≤ 3 then
;;        return n > 1
;;    else if n mod 2 = 0 or n mod 3 = 0
;;        return false
;;
;;    let i ← 5
;;
;;    while i × i ≤ n do
;;        if n mod i = 0 or n mod (i + 2) = 0
;;            return false
;;        i ← i + 6
;;
;;    return true
